//
//  MapDataController.h
//  LjIndoor
//
//  Created by Akhil on 07/04/16.
//  Copyright Â© 2016 Logicjunction. All rights reserved.
//

#import <Foundation/Foundation.h>

@class MapUpdateModel, DestinationFeed, MenuFeed, FloorReferenceFeed, ShortestPathObjectContent, JSONModelError, FloorReference, BeaconModel, MapFloorGeofenceFeed, MapOverlayModel, Events, VersionInfo, JSONModel;

@interface MapDataController : NSObject

@property(nonatomic, strong) NSString *versionId;
@property(nonatomic, assign) bool hardReload;

-(void) getUpdatedMapModel;

	// need to be available.
-(void) getDestinationFeed:(void(^)(DestinationFeed *result))completion error: (void(^)(NSError *jsonError))error;
-(void) getMenuFeed:(void(^)(MenuFeed *result))completion error: (void(^)(NSError *jsonError))error;
-(void) getEventsForDateRange:(NSString*)startDate andEndDate:(NSString*)endDate onCompletion:(void (^)(Events *))completion error:(void (^)(NSError *))error;
-(void) getFloorPlanWithBeaconsFeed:(void(^)(FloorReferenceFeed *result))completion error: (void(^)(NSError *jsonError))error;
-(void) getFloorPlanWithGeofenceFeedForFloorPlanId:(NSString *)floorPlanId onCompletion:(void(^)(MapFloorGeofenceFeed *result))completion error: (void(^)(NSError *jsonError))error;

-(void)getCurrentVersionForAPIKey:(NSString*)apiKey onCompletion:(void (^) (BOOL isSuccess, NSString* version, NSString *mapVersionId, NSString *error))block;
-(void) postUserTrackingInfoWithModelObjects:(NSArray *)modelsArray onCompletion:(void (^) (BOOL isSuccess, NSString *error))block;
-(void)writeUserTrackingInfoDataIntoPlist:(NSArray *)modelsArray onCompletion:(void (^) (BOOL isDataWrittenIntoPlist, NSString *error)) block;
-(void) postUserTrackingPlistOnServerOnCompletion:(void (^) (BOOL isSuccess, NSString *error))block;
-(void) postBeaconStatusWithModelObjects:(NSArray *)beaconModelArray onCompletion:(void (^) (BOOL isSuccess, NSString *error))block;
-(void)getBeaconTelemetryInfo:(void(^) (bool success, NSDictionary *jsonString, NSString *error))block;

/**
 @brief: Function to fetch the shortest path from one location to the desired location using quick link references. 
 @param: l : NSString object type, Language value that needs to be set.
 @param: pt : NSString object type, Parking type value needs to be set.
 @param: s : NSString object type, Starting point quick link needs to be set.
 @param: e : NSString object type, End point quick link needs to be set.
 @param: mobile : Bool value, if the web api call is being generated by a mobile device.
 @param: completion : Block that returns the object of type ShortestPathObjectContent.
 @param: error : JSONModelError object that returns the reference to type of error generated.
 // Version number is also used, but is sent internally and needs to be set from MenuManager class.
 */
//-(void) getShortestPathFromUrlUsingQuickLinksWithLanguage:(NSString *)l parkingType:(NSString *)pt startingPoint:(NSString *)s endingPoint:(NSString *)e isMobile:(BOOL)mobile :(void(^)(ShortestPathObjectContent *))completion error:(void(^)(JSONModelError *)) error;
/**
 @brief: Function to fetch the shortest path from current location to the desired location.
 @param: l : NSString object type, Language value that needs to be set.
 @param: pt : NSString object type, Parking type value needs to be set.
 @param: e : NSString object type, End point quick link needs to be set.
 @param: currentX : float value, of the current x-position on the map.
 @param: currentY : float value, of the current y-position on the map.
 @param: completion : Block that returns the object of type ShortestPathObjectContent.
 @param: error : JSONModelError object that returns the reference to type of error generated.
 // Version number is also used, but is sent internally and needs to be set from MenuManager class.
 */
//-(void) getShortestPathFromUrlUsingFloorPlanIdAndDestinationQuickLinkWithLanguage:(NSString *)l parkingType:(NSString *)pt endingPoint:(NSString *)e currentXValue:(float)currentX andCurrentYValue:(float)currentY andFloorPlanId:(NSString *)floorPlanId :(void(^)(ShortestPathObjectContent *))completion error:(void(^)(JSONModelError *)) error;

/**
 @brief: Function to fetch all beacon uuid's that are presenlty available using a get web api call.
 			The return value also contains a welcome message and a descriptive message/ offer message that needs to be shown once the user is in the range/ proximity of the device.
 @returns: NSDictionary reference object that contains the UUID as the key and the metadata as value. It contains the floor id, welcome message and descriptive message.
 // Version number is also used, but is sent internally and needs to be set from MenuManager class.
 */
-(void) fetchAllBeaconUDIDalongWithMetaDataFromUrl:(NSString *)urlString withCompletionBlock:(void(^)(BeaconModel *model))completion WithErrorBlock:(void (^) (JSONModelError * errorObject))error;

/**
 @brief: Function to fetch the mapping of floor reference id and map guid.
 @returns: NSDictionary reference object that contains the floor id as the key and the floor reference guid as value.
 // Version number is also used, but is sent internally and needs to be set from MenuManager class.
 */
-(void) fetchFloorIdMapGuidMappingOnCompletion:(void(^)(FloorReference *modelObject))completion andOnError:(void(^)(JSONModelError *error))errorFound;

-(void) getMapOverlayContentForFloorPlanId:(NSString *)floorplanId completion:(void (^)(NSMutableArray  *))completion error:(void (^)(NSError *))error;

@end
